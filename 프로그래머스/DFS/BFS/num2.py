# 문제 설명
# 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.

# 컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.

# 제한사항
# 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.
# 각 컴퓨터는 0부터 n-1인 정수로 표현합니다.
# i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.
# computer[i][i]는 항상 1입니다.
# 입출력 예
# n	computers	return
# 3	[[1, 1, 0], [1, 1, 0], [0, 0, 1]]	2
# 3	[[1, 1, 0], [1, 1, 1], [0, 1, 1]]	1

def solution(n, computers):
    answer = 0 # 네트워크 갯수를 저장할 주소
    bfs = [] # 탐색을 위한 큐
    visited = [0]*n # 방문한 노드를 표시할 리스트

    while 0 in visited: # 모든 노드를 방문할 때까지 반복
        bfs.append(visited.index(0)) # 순차적으로 방문하지 않은 노드를 방문하고자 큐에 추가해주기
        while bfs: # 시작 컴퓨터의 모든 네트워크를 확인할 때 까지
            node = bfs.pop(0) # 큐의 맨 앞 값을 뺴주고
            visited[node] = 1 # 방문표시를 해준다.
            for i in range(n): # 인접 네트워크를 확인하기위한 반복문
                if visited[i] == 0 and computers[node][i] == 1: # 아직 방문하지 않았고, 인접해있다면
                    bfs.append(i) # 큐에 넣어준다.
        answer += 1 
    return answer



n = 5
computers = [[1, 1, 0, 1, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 1, 0, 1, 1]]
# n = 3
# computers = [[1, 1, 0], [1, 1, 1], [0, 1, 1]]
# n = 3
# computers = [[1, 1, 0], [1, 1, 0], [0, 0, 1]]

print(solution(n, computers))
